* A45 - Card Elimination
- created: 2023-01-08 sun
- ご意見・ご要望は[issue・プルリク用のGitHub](https://github.com/phasetr/AlgorithmsAndDataStructureByFSharp/tree/master/MyLectureJP/cp)まで
- [競技プログラミングのためのF#入門](../../byfs/fsharp-for-cp/index.md)
- [GitHub上の対応ディレクトリ](https://github.com/phasetr/AlgorithmsAndDataStructureByFSharp/tree/master/AtCoder/tessoku-book/A45)
- [公式ページ](https://atcoder.jp/contests/tessoku-book/tasks/tessoku_book_as)
** 入出力
```fsharp
let N,C = stdin.ReadLine().Split() |> fun x -> int x.[0], char x.[1]
let S = stdin.ReadLine()
solve N C S |> stdout.WriteLine
```
** 方針
文字列間の距離を`L^1`距離(マンハッタン距離)で表して考えます.
特に`(R,B,W)`で原点からの距離を表すと,
初期値は原点からの距離が`N`で,
そこから`L^1`距離を1ずつ減らして目標地点(`(1,0,0),(0,1,0),(0,0,1)`のどれか)に到達できるかが問題です.

次に文字の変換を距離で解釈します.
名前があると便利なため,
それぞれの変換に番号をつけます.

1. `WW - W`: `W-1`移動
2. `WR - R`: `W-1`移動
3. `WB - B`: `W-1`移動
4. `RR - B`: `R-2,B+1`移動
5. `BB - W`: `B-2,W+1`移動
6. `RB - W`: 立方体の対角線上の移動で`R-1, B-1, W+1`

いずれにせよステップごとに原点からの`L^1`距離は1ずつ減ります.
ある時点での距離`L`を別に記録して状態を`(R,B)`だけで考えると,
注目すべきは上記の`2,3,6`です.
特に直線`R-B=k`上で考えると,
`6`は直線上の移動で,
`2,3` は`k ± 3`移動します.
三つつのゴールはそれぞれ`k=1,-1,0`にあたるため,
初期位置から`k`を`±3`して目標に位置合わせできるなら`"Yes"`です.
特に`(R-B)%3`の値がそれぞれ`1,2,0`のどれになるかが問題です.
** 解説
アルゴリズムさえ考えられれば,
あとは各文字を数値に変換して計算すれば終わりです.

```fsharp
let solve N C S =
  let f c = match c with | 'W' -> 0 | 'R' -> 1 | _ -> 2
  S |> Seq.sumBy f |> fun n -> if n%3 = f C then "Yes" else "No"

let N,C = stdin.ReadLine().Split() |> fun x -> int x.[0], char x.[1]
let S = stdin.ReadLine()
solve N C S |> stdout.WriteLine
```
