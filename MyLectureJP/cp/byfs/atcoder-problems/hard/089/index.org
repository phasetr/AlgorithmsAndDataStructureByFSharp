* 89 E - Colorful Hats 2
- created: 2022-12-19 mon
- ご意見・ご要望は[issue・プルリク用のGitHub](https://github.com/phasetr/AlgorithmsAndDataStructureByFSharp/tree/master/MyLectureJP/cp)まで
- [競技プログラミングのためのF#入門](../../../fsharp-for-cp/index.md)
- [GitHub上の対応ディレクトリ](https://github.com/phasetr/AlgorithmsAndDataStructureByFSharp/tree/master/AtCoder/SUMITRUST2019)
- [公式ページ](https://atcoder.jp/contests/sumitrust2019/tasks/sumitb2019_e)
- 要点: アルゴリズムの検討
** 入出力
```
let N = stdin.ReadLine() |> int
let Aa = stdin.ReadLine().Split() |> Array.map int64
solve N Aa |> stdout.WriteLine
```
** 解説
公式解説通りに実装します.
*** MOD計算
計算漏れしないように演算子を定義してそれを使いましょう.

```fsharp
  let MOD = 1_000_000_007L
  let (.*) a b = (a*b)%MOD
```

`MOD`は`Int32`でも問題ないと思いますが,
たまにオーバーフローしてはまり倒すため,
怪しそうな場合はとにかく`Int64`に倒します.
*** 大枠
各`i`ごとに計算した結果をかけて積んでいけばよく,
単純に`Array.fold`でループを回します.
変数名は公式解説に合わせます.

積む変数は最終的な計算用の値である`Ti`と`xi,yi,zi`です.
前の人までの帽子の値が必要なため`xi,yi,zi`も`State`に積む必要があります.
初期値はかけ算の初期値だから`Ti = 1`,
帽子の数は`(xi,yi,zi) = (0,0,0)`でよく,
特に次のように書けます.

```fsharp
  ((1L,(0L,0L,0L)), Aa)
  ||> Array.fold (fun ((t,(x,y,z)) ai) -> ("適切に埋める")
  |> fst
```

最終的に必要なのは`t`の値だからそれを`fst`で切り取ります.
タプルを切り取るのは`fst`と`snd`までしかないため,
この最後の切り取りが単純になるように`State`を構成しています.
*** `folder`の構成
まず`t`を更新します.
`filter`と`length`を組み合わせるのが素直な実装です.
ここでは`sumBy`で次のように処理します.

```fsharp
    let ti = [|x;y;z|] |> Array.sumBy (fun w -> if w=ai then 1L else 0L)
```

いまは`Int64`で`t`を積むため,
`filter >> length`で処理する場合は最後に`int64`をかませる必要があります.

次は`(x,y,z)`の更新です.
これは単純な場合分けで十分です.

```fsharp
    let xyz = if ai=x then (x+1L,y,z) elif ai=y then (x,y+1L,z) else (x,y,z+1L)
```

あとはこれらの値をタプルにまとめて次のステップに回します.

```fsharp
    (t.*ti, xyz)
```

`MOD`つきのかけ算にするよう注意しましょう.
*** まとめ
ここまでの処理をまとめると次のように書けます.

```fsharp
let solve N Aa =
  let MOD = 1_000_000_007L
  let (.*) a b = (a*b)%MOD
  ((1L,(0L,0L,0L)), Aa)
  ||> Array.fold (fun (t,(x,y,z)) ai ->
    let ti = [|x;y;z|] |> Array.sumBy (fun w -> if w=ai then 1L else 0L)
    let xyz = if ai=x then (x+1L,y,z) elif ai=y then (x,y+1L,z) else (x,y,z+1L)
    (t.*ti, xyz))
  |> fst

let N = stdin.ReadLine() |> int
let Aa = stdin.ReadLine().Split() |> Array.map int64
solve N Aa |> stdout.WriteLine
```
