# # Even Fibonacci numbers
# - [URL](https://projecteuler.net/problem=2)
# ## Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# > 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#
# フィボナッチ数列の新しい項はその前の二項の和として得られる。
# フィボナッチ数列の値が 400 万を超える前の偶数の値を取る項の和を調べよ。

# ## 参考
# - [URL](https://qiita.com/antimon2/items/ff31a74758eb4b63604e)
# 次のフィボナッチ数のバイナリ公式を利用：計算量は $O(\log n)$.
# \begin{align}
# F_{2n} &= (2F_{n-1} + F_n) F_n, \\
# F_{2n+1} &= F_n^2 + F_{n+1}^2.
# \end{align}

function fib(n::Integer)
  d = Dict(zero(n)=>big"0", one(n)=>big"1")
  fib(n, d)
end

function fib(n, d)
  if haskey(d, n)
      return d[n]
  end
  if n < 0
      result = iseven(n) ? -fib(-n, d) : fib(-n, d)
      d[n] = result
      return result
  end
  m = n ÷ 2
  result = if iseven(n)
      (2 * fib(m - 1, d) + fib(m, d)) * fib(m, d)
  else
      fib(m, d) ^ 2 + fib(m + 1, d) ^ 2
  end
  d[n] = result
  return result
end

function solve(n)
  evens = []
  i = 1
  while fib(i) < n
    fib_i = fib(i)
    if fib_i % 2 == 0
      push!(evens, fib_i)
    end
    i += 1
  end
  evens |> sum |> println
end

for_million = 4000000
solve(for_million)
