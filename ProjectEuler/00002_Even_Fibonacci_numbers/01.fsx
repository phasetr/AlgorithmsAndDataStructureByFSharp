// # Even Fibonacci numbers
// - [URL](https://projecteuler.net/problem=2)
// ## Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// > 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
//
// フィボナッチ数列の新しい項はその前の二項の和として得られる。
// フィボナッチ数列の値が 400 万を超える前の偶数の値を取る項の和を調べよ。
#nowarn "40"

let rec fibMemo =
    let dict =
        System.Collections.Generic.Dictionary<_, _>()

    fun n ->
        match dict.TryGetValue(n) with
        | true, v -> v
        | false, _ ->
            let temp =
                if n = 0L then 0L
                else if n = 1L then 1L
                else fibMemo (n - 1L) + fibMemo (n - 2L)

            dict.Add(n, temp)
            temp

let initInfinite64 (f: int64 -> int64) (limit: int64) =
    seq {
        let mutable i = 0L
        let mutable l = 0L
        // この制約を入れないと f i がオーバーフローしてひどいことになる。
        // どうひどいことになるかは Seq.iter (printfn "%A") などで実験してみよう。
        while l < limit do
            let a = f i
            yield a
            l <- a
            i <- i + 1L
    }

let fourMillion = 4000000L

initInfinite64 fibMemo fourMillion
|> Seq.filter (fun x -> x < fourMillion && x % 2L = 0L)
|> Seq.sum
|> printfn "%A"
