#r "nuget: FsUnit"
open FsUnit

(*
let N,M,Ia = 5,4,[|(1,2);(2,3);(3,4);(3,5)|]
let N,M,Ia = 15,30,[|(6,9);(9,10);(2,9);(9,12);(2,14);(1,4);(4,6);(1,3);(4,14);(1,6);(9,11);(2,6);(3,9);(5,9);(4,9);(11,15);(1,13);(4,13);(8,9);(9,13);(5,15);(3,5);(8,10);(2,4);(9,14);(1,9);(2,8);(6,13);(7,9);(9,15)|]
*)
let solve N M Ia =
  (Array.create N [], Ia)
  ||> Array.fold (fun acc (a,b) ->
    acc.[a-1] <- (b-1)::acc.[a-1]; acc.[b-1] <- (a-1)::acc.[b-1]
    acc)
  |> Array.mapi (fun i xs -> sprintf "%i: {%s}" (i+1) (xs |> List.map ((+) 1 >> string) |> String.concat ", "))

let N,M = stdin.ReadLine().Split() |> Array.map int |> (fun x -> x.[0],x.[1])
let Ia = Array.init M (fun _ -> stdin.ReadLine().Split() |> Array.map int |> fun x -> x.[0],x.[1])
solve N M Ia |> Array.map (stdout.WriteLine)

solve 5 4 [|(1,2);(2,3);(3,4);(3,5)|]
(*
1: {2}
2: {1, 3}
3: {2, 4, 5}
4: {3}
5: {3}
*)
solve 15 30 [|(6,9);(9,10);(2,9);(9,12);(2,14);(1,4);(4,6);(1,3);(4,14);(1,6);(9,11);(2,6);(3,9);(5,9);(4,9);(11,15);(1,13);(4,13);(8,9);(9,13);(5,15);(3,5);(8,10);(2,4);(9,14);(1,9);(2,8);(6,13);(7,9);(9,15)|]
(*
1: {3, 4, 6, 9, 13}
2: {4, 6, 8, 9, 14}
3: {1, 5, 9}
4: {1, 2, 6, 9, 13, 14}
5: {3, 9, 15}
6: {1, 2, 4, 9, 13}
7: {9}
8: {2, 9, 10}
9: {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}
10: {8, 9}
11: {9, 15}
12: {9}
13: {1, 4, 6, 9}
14: {2, 4, 9}
15: {5, 9, 11}
*)
